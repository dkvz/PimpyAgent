/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFrameConversation.java
 *
 * Created on 01-oct.-2009, 13:16:44
 */

package UI;

import pimpy.*;
import dataModel.*;
import java.net.URL;
import java.awt.Cursor;
import java.io.IOException;
import javax.swing.ImageIcon;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.Document;
import java.text.SimpleDateFormat;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Alain
 */
public class JFrameConversation extends javax.swing.JFrame {

    private PimpyController controller = null;
    private boolean debugDialog = false;
    private String agentName;
    public static final String AGENT_NAME = "Joe";

    /** Creates new form JFrameConversation */
    public JFrameConversation(PimpyController controller) {
        initComponents();
        this.controller = controller;
        URL url = JFrameConversation.class.getResource("courgette.jpg");
        if (url != null) {
            this.setIconImage(new ImageIcon(url).getImage());
        }
    }

    public void append(String text) {
        try {
            Document doc = this.jEditorPaneConversation.getDocument();
            ((HTMLEditorKit) this.jEditorPaneConversation.getEditorKit()).read(new java.io.StringReader(text), doc, doc.getLength());
            this.jEditorPaneConversation.setCaretPosition(doc.getLength());
        } catch (IOException ex) {
            Logger.getLogger(JFrameConversation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(JFrameConversation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getAnswer(String submitted) {
        AnsweringThread answ = new AnsweringThread(getController(),this, submitted);
        answ.start();
    }

    public void setStatus(String status) {
        this.jLabelStatus.setText(status);
    }

    public void notifyFailure(Exception ex) {
        JOptionPane.showMessageDialog(this, "Acanthus doesn't want to talk to you, something is wrong with his internal mechanisms :\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }

    public void appendMessage(String author, String text, boolean capitalizeFirst) {
        if (capitalizeFirst && text.length() > 1) {
            // Make first letter to upper case.
            String first = text.substring(0, 1);
            first = first.toUpperCase();
            text = first.concat(text.substring(1));
        }
        String toWrite = "<b>" + author + " said :</b><blockquote>" + text + "</blockquote>";
        append(toWrite);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPaneConversation = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaSubmit = new javax.swing.JTextArea();
        jButtonSubmit = new javax.swing.JButton();
        jPanelStatus = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemQuit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemCut = new javax.swing.JMenuItem();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jMenuTools = new javax.swing.JMenu();
        jMenuItemDebug = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemStatistics = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Acanthus conversation");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(450, 350));

        jEditorPaneConversation.setEditable(false);
        jScrollPane1.setViewportView(jEditorPaneConversation);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTextAreaSubmit.setColumns(40);
        jTextAreaSubmit.setLineWrap(true);
        jTextAreaSubmit.setRows(5);
        jTextAreaSubmit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextAreaSubmitKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaSubmit);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jButtonSubmit.setText("Send");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSubmit, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanelStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelStatus.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabelStatus.setText("Acanthus is listening.");
        jPanelStatus.add(jLabelStatus);

        jPanel2.add(jPanelStatus, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jMenuFile.setMnemonic('f');
        jMenuFile.setText("File");

        jMenuItemQuit.setMnemonic('q');
        jMenuItemQuit.setText("Quit");
        jMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemQuit);

        jMenuBarMain.add(jMenuFile);

        jMenuEdit.setMnemonic('e');
        jMenuEdit.setText("Edit");

        jMenuItemCut.setText("Cut");
        jMenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCutActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCut);

        jMenuItemCopy.setText("Copy");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCopy);

        jMenuItemPaste.setText("Paste");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemPaste);

        jMenuBarMain.add(jMenuEdit);

        jMenuTools.setMnemonic('t');
        jMenuTools.setText("Tools");

        jMenuItemDebug.setMnemonic('d');
        jMenuItemDebug.setText("Debug");
        jMenuItemDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDebugActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenuItemDebug);

        jMenuBarMain.add(jMenuTools);

        jMenuHelp.setMnemonic('h');
        jMenuHelp.setText("Help");

        jMenuItemStatistics.setMnemonic('s');
        jMenuItemStatistics.setText("Knowledge base...");
        jMenuItemStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStatisticsActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemStatistics);
        jMenuHelp.add(jSeparator1);

        jMenuItemAbout.setMnemonic('a');
        jMenuItemAbout.setText("About...");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);

        jMenuBarMain.add(jMenuHelp);

        setJMenuBar(jMenuBarMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        getController().close();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitActionPerformed
        this.formWindowClosing(null);
    }//GEN-LAST:event_jMenuItemQuitActionPerformed

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        String subm = this.jTextAreaSubmit.getText();
        if (!subm.isEmpty()) {
            this.jTextAreaSubmit.setText("");
            this.appendMessage("You", subm, true);
            this.getAnswer(subm);
        }
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jTextAreaSubmitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaSubmitKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            evt.consume();
            this.jButtonSubmitActionPerformed(null);
        }
    }//GEN-LAST:event_jTextAreaSubmitKeyPressed

    private void jMenuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCutActionPerformed
        this.jTextAreaSubmit.cut();
    }//GEN-LAST:event_jMenuItemCutActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        this.jTextAreaSubmit.copy();
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        this.jTextAreaSubmit.paste();
    }//GEN-LAST:event_jMenuItemPasteActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.jEditorPaneConversation.setContentType("text/html");
        this.jEditorPaneConversation.setText("<style>b {font-family: sans-serif} blockquote {font-family: sans-serif}</style>\n");
        this.append("<b><i>Loaded knowledge base...</i></b><br /><br />");
        this.jTextAreaSubmit.requestFocus();
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        JDialogAbout about = new JDialogAbout(this, true);
        about.setLocationRelativeTo(null);
        about.setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStatisticsActionPerformed
        // Cheap knowledge base stats dialog.
        try {
            KnowledgeBaseInfo info = getController().getKnowledgeBaseInfo();
            String disp = "";
            if (info != null) {
                disp += "Knowledge base author : " + info.getAuthor() + "\n";
                disp += "Description : " + info.getDescription() + "\n";
                SimpleDateFormat formatDate = new SimpleDateFormat("dd/MM/yyyy  HH:mm");
                disp += "Created on : " + formatDate.format(info.getCreated()) + "\n";
                disp += "\n";
            }
            disp += "Knowledge base sentence count : " + getController().getSentenceCount() + " sentences.\n";
            disp += "Knowledge base pattern count : " + getController().getPatternCount() + " patterns.\n";
            disp += "Knowledge base known words : " + getController().getWordCount() + " different words.\n";
            JOptionPane.showMessageDialog(this, disp, "Knowledge base facts", JOptionPane.PLAIN_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "There was an ugly SQL exception reported : " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemStatisticsActionPerformed

    private void jMenuItemDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDebugActionPerformed
        if (!this.debugDialog) {
            JDialogDebug debug = new JDialogDebug(this, false);
            debug.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItemDebugActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JEditorPane jEditorPaneConversation;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemDebug;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemQuit;
    private javax.swing.JMenuItem jMenuItemStatistics;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextAreaSubmit;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the debugDialog
     */
    public boolean isDebugDialog() {
        return debugDialog;
    }

    /**
     * @param debugDialog the debugDialog to set
     */
    public void setDebugDialog(boolean debugDialog) {
        this.debugDialog = debugDialog;
    }

    /**
     * @return the controller
     */
    public PimpyController getController() {
        return controller;
    }

    /**
     * @param controller the controller to set
     */
    public void setController(PimpyController controller) {
        this.controller = controller;
    }

    /**
     * @return the agentName
     */
    public String getAgentName() {
        return agentName;
    }

    /**
     * @param agentName the agentName to set
     */
    public void setAgentName(String agentName) {
        this.agentName = agentName;
        this.setTitle("Talking to " + this.agentName);
        this.jLabelStatus.setText(this.agentName + " is listening.");
    }

}
